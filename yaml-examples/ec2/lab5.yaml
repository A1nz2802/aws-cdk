Description: coolest stack :)
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: MyVpc
        - Key: project
          Value: myapp
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MyVPC
  MySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MySubnet-1
        - Key: project
          Value: myapp
      VpcId:
        Fn::GetAtt:
          - MyVPC
          - VpcId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MySubnet-1
  MyPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: MyPublic-RT
        - Key: project
          Value: myapp
      VpcId:
        Fn::GetAtt:
          - MyVPC
          - VpcId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MyPublic-RT
  AttachRtToSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Fn::GetAtt:
          - MyPublicRT
          - RouteTableId
      SubnetId:
        Fn::GetAtt:
          - MySubnet1
          - SubnetId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/AttachRtToSubnet1
  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW
        - Key: project
          Value: myapp
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MyIGW
  AttachVpcToIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Fn::GetAtt:
          - MyIGW
          - InternetGatewayId
      VpcId:
        Fn::GetAtt:
          - MyVPC
          - VpcId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/AttachVpcToIgw
  IgwRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Fn::GetAtt:
          - MyIGW
          - InternetGatewayId
      RouteTableId:
        Fn::GetAtt:
          - MyPublicRT
          - RouteTableId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/IgwRoute
  MySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Temporary SG for the Storage Service Labs
      GroupName: StorageLabs
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: SSH Access
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          Description: HTTP Access
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: Name
          Value: StorageLabs
        - Key: project
          Value: myapp
      VpcId:
        Fn::GetAtt:
          - MyVPC
          - VpcId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MySG
  MakeIMDSv2Optional:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        MetadataOptions:
          HttpTokens: optional
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MakeIMDSv2Optional
  IMDSv2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-05b10e08d247fb927
      InstanceType: t2.micro
      SecurityGroupIds:
        - Fn::GetAtt:
            - MySG
            - Id
      SubnetId:
        Fn::GetAtt:
          - MySubnet1
          - SubnetId
      Tags:
        - Key: Name
          Value: IMDSv2
        - Key: project
          Value: myapp
      UserData:
        Fn::Base64: |-
          #!/bin/bash
          # Update system and install httpd (Apache)
          yum update -y
          yum install -y httpd

          # Start httpd service and enable it to start on boot
          systemctl start httpd
          systemctl enable httpd

          # Fetch metadata using IMDSv2
          TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id -H "X-aws-ec2-metadata-token: $TOKEN")
          AMI_ID=$(curl http://169.254.169.254/latest/meta-data/ami-id -H "X-aws-ec2-metadata-token: $TOKEN")
          INSTANCE_TYPE=$(curl http://169.254.169.254/latest/meta-data/instance-type -H "X-aws-ec2-metadata-token: $TOKEN")

          # Create a web page to display the metadata
          cat <<EOF > /var/www/html/index.html
          <html>
          <head>
              <title>EC2 Instance Metadata :P</title>
          </head>
          <body>
              <h1>EC2 Instance Metadata</h1>
              <p>Instance ID: $INSTANCE_ID</p>
              <p>AMI ID: $AMI_ID</p>
              <p>Instance Type: $INSTANCE_TYPE</p>
          </body>
          </html>
          EOF
    Metadata:
      aws:cdk:path: Exercise4CdkStack/IMDSv2
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/0WMywqDMBBFv8W9pjZ00a24EKGLotJtGeOI8TERM6mI+O/FWnA1d869HCmu91CEHsw2UFUX9LoUa86gOh9m+0YlxRrX9HrGflxT7kpC3lNmHGMBZY8nP1lkrVEaWBva65QYJ0JOgHGGxT+E/y9iBtUMSKf3p0TlJs1LMhk37uABjlRT4DD2cExSsgykcNt8MhWK1l4+UorrTYRea7UOJkesBxTZcb/XNkwv7AAAAA==
    Metadata:
      aws:cdk:path: Exercise4CdkStack/CDKMetadata/Default
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]

