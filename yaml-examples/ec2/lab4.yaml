Description: coolest stack :)
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: MyVpc
        - Key: project
          Value: myapp
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MyVPC
  MySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MySubnet-1
        - Key: project
          Value: myapp
      VpcId:
        Fn::GetAtt:
          - MyVPC
          - VpcId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MySubnet-1
  MySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MySubnet-2
        - Key: project
          Value: myapp
      VpcId:
        Fn::GetAtt:
          - MyVPC
          - VpcId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MySubnet-2
  MyPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: MyPublic-RT
        - Key: project
          Value: myapp
      VpcId:
        Fn::GetAtt:
          - MyVPC
          - VpcId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MyPublic-RT
  AttachRtToSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Fn::GetAtt:
          - MyPublicRT
          - RouteTableId
      SubnetId:
        Fn::GetAtt:
          - MySubnet1
          - SubnetId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/AttachRtToSubnet1
  AttachRtToSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Fn::GetAtt:
          - MyPublicRT
          - RouteTableId
      SubnetId:
        Fn::GetAtt:
          - MySubnet2
          - SubnetId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/AttachRtToSubnet2
  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW
        - Key: project
          Value: myapp
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MyIGW
  AttachVpcToIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Fn::GetAtt:
          - MyIGW
          - InternetGatewayId
      VpcId:
        Fn::GetAtt:
          - MyVPC
          - VpcId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/AttachVpcToIgw
  IgwRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Fn::GetAtt:
          - MyIGW
          - InternetGatewayId
      RouteTableId:
        Fn::GetAtt:
          - MyPublicRT
          - RouteTableId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/IgwRoute
  MySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Temporary SG for the Storage Service Labs
      GroupName: StorageLabs
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: anywhere rule :p
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: Name
          Value: StorageLabs
        - Key: project
          Value: myapp
      VpcId:
        Fn::GetAtt:
          - MyVPC
          - VpcId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MySG
  AddSGRuleToMySG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 2049
      GroupId:
        Fn::GetAtt:
          - MySG
          - Id
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
          - MySG
          - Id
      ToPort: 2049
    Metadata:
      aws:cdk:path: Exercise4CdkStack/AddSGRuleToMySG
  MyEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: MyEFS
        - Key: project
          Value: myapp
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
        - TransitionToArchive: AFTER_90_DAYS
      PerformanceMode: generalPurpose
      ThroughputMode: elastic
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MyEFS
  MyEFSTargetMount1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Fn::GetAtt:
          - MyEFS
          - FileSystemId
      SecurityGroups:
        - Fn::GetAtt:
            - MySG
            - Id
      SubnetId:
        Fn::GetAtt:
          - MySubnet1
          - SubnetId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MyEFSTargetMount1
  MyEFSTargetMount2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Fn::GetAtt:
          - MyEFS
          - FileSystemId
      SecurityGroups:
        - Fn::GetAtt:
            - MySG
            - Id
      SubnetId:
        Fn::GetAtt:
          - MySubnet2
          - SubnetId
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MyEFSTargetMount2
  MyInstace1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-05b10e08d247fb927
      InstanceType: t2.micro
      SecurityGroupIds:
        - Fn::GetAtt:
            - MySG
            - Id
      SubnetId:
        Fn::GetAtt:
          - MySubnet1
          - SubnetId
      Tags:
        - Key: Name
          Value: MyInstace-1
        - Key: project
          Value: myapp
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-2
                
                      #cloud-config
                      runcmd:
                        - mkdir -p /home/ec2-user/efs-mount-point
                        - sudo yum -y install nfs-utils
                        - sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport 
              - Fn::GetAtt:
                  - MyEFS
                  - FileSystemId
              - Fn::Sub: .efs.${AWS::Region}.amazonaws.com
              - ":/ /home/ec2-user/efs-mount-point

                \    "
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MyInstace-1
  MyInstace2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-05b10e08d247fb927
      InstanceType: t2.micro
      SecurityGroupIds:
        - Fn::GetAtt:
            - MySG
            - Id
      SubnetId:
        Fn::GetAtt:
          - MySubnet2
          - SubnetId
      Tags:
        - Key: Name
          Value: MyInstace-2
        - Key: project
          Value: myapp
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-2
                
                      #cloud-config
                      runcmd:
                        - mkdir -p /home/ec2-user/efs-mount-point
                        - sudo yum -y install nfs-utils
                        - sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport 
              - Fn::GetAtt:
                  - MyEFS
                  - FileSystemId
              - Fn::Sub: .efs.${AWS::Region}.amazonaws.com
              - ":/ /home/ec2-user/efs-mount-point

                \    "
    Metadata:
      aws:cdk:path: Exercise4CdkStack/MyInstace-2
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/2WOQWuDQBCFf0vu69ZID70GoSGHQokh1zJunukmOlt2ZiMi/vdiLHjoad77HnxMYbdvuc031EvmLves9bUdKyV3N9TL1whX2LFs+PxZmrLhKtUMndMxJMWJ6hYrX9lOJDhP6gPP84EVkaF7UvQ0mEX413aq5L478Op9KuFS9DrsY0g//8CBrxEii1yU2GEyaOT57LtvUQ2i6Ob9IyTWE8UrdJomw+ECe5OXR1HY7avNNzfxPouJ1Xewx+X+AgxHvpMXAQAA
    Metadata:
      aws:cdk:path: Exercise4CdkStack/CDKMetadata/Default
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]

